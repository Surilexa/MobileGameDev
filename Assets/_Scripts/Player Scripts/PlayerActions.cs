//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Scripts/Player Scripts/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerAction"",
            ""id"": ""3f94eb00-1479-4672-abdb-f8732bc164df"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1d5d6344-bd31-4ab8-8a9f-f6f0e4367f83"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b05dcaa3-373c-40ec-82e7-18a47fd9d64e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""895267de-ac45-4ce6-92d7-3a391f5131c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoseGame"",
                    ""type"": ""Button"",
                    ""id"": ""29687e21-8641-4c34-9885-c6b702c9113b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WinGame"",
                    ""type"": ""Button"",
                    ""id"": ""9f68dfc2-61ca-4b88-992c-91d3700429ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bdd1ccfc-e743-47a1-b00b-3cf3fb8e5ed1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Touch"",
                    ""id"": ""210cdb8d-e462-4745-a25d-c2ebafde9683"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4957cf6a-2b05-44b6-a9f9-3e0358c7edaf"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a15dd784-8e14-418a-b123-1d36473c9f69"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d856a800-a183-4356-86a5-3f2a41a17b24"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6532c89a-4180-475d-a06f-cf8548084b9b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""9ccd2096-8e2c-44c2-801a-6d16e75a8957"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c87f2184-3f28-4082-968b-3f53ba6109c4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a76e4351-3c30-453a-b858-b9cebe432a82"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""398949c0-55ad-44fe-a19f-3181b3cf47f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1f690c88-7b91-46ee-926d-df088737fa9f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0d54cfaf-a6c8-4ee9-b2ea-36e404fdd6ce"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77ec9003-7b28-425c-9319-ff42b62b14a8"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""082280bb-b9fb-4f2a-8f7e-28c45d9bd9e3"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b28fc4da-655a-433d-8594-61da91b63444"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WinGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerHUD"",
            ""id"": ""0def2d5b-6177-4d96-8fd4-369cce16d027"",
            ""actions"": [
                {
                    ""name"": ""SkillTree"",
                    ""type"": ""Button"",
                    ""id"": ""e1f1fe9e-b800-4505-aa50-d07b825cc917"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17729be2-bbdc-4d2e-af54-896793a29295"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillTree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SkillTree"",
            ""id"": ""724534ff-60ac-409b-98bc-e0e62ce7b495"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""98eaed98-f6df-4d73-b5e3-5e685c5b7080"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb1c056e-c66e-417f-8166-7f79fb79ee4b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_Move = m_PlayerAction.FindAction("Move", throwIfNotFound: true);
        m_PlayerAction_Jump = m_PlayerAction.FindAction("Jump", throwIfNotFound: true);
        m_PlayerAction_Attack = m_PlayerAction.FindAction("Attack", throwIfNotFound: true);
        m_PlayerAction_LoseGame = m_PlayerAction.FindAction("LoseGame", throwIfNotFound: true);
        m_PlayerAction_WinGame = m_PlayerAction.FindAction("WinGame", throwIfNotFound: true);
        // PlayerHUD
        m_PlayerHUD = asset.FindActionMap("PlayerHUD", throwIfNotFound: true);
        m_PlayerHUD_SkillTree = m_PlayerHUD.FindAction("SkillTree", throwIfNotFound: true);
        // SkillTree
        m_SkillTree = asset.FindActionMap("SkillTree", throwIfNotFound: true);
        m_SkillTree_Newaction = m_SkillTree.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private IPlayerActionActions m_PlayerActionActionsCallbackInterface;
    private readonly InputAction m_PlayerAction_Move;
    private readonly InputAction m_PlayerAction_Jump;
    private readonly InputAction m_PlayerAction_Attack;
    private readonly InputAction m_PlayerAction_LoseGame;
    private readonly InputAction m_PlayerAction_WinGame;
    public struct PlayerActionActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerActionActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerAction_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerAction_Jump;
        public InputAction @Attack => m_Wrapper.m_PlayerAction_Attack;
        public InputAction @LoseGame => m_Wrapper.m_PlayerAction_LoseGame;
        public InputAction @WinGame => m_Wrapper.m_PlayerAction_WinGame;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @LoseGame.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnLoseGame;
                @LoseGame.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnLoseGame;
                @LoseGame.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnLoseGame;
                @WinGame.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWinGame;
                @WinGame.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWinGame;
                @WinGame.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnWinGame;
            }
            m_Wrapper.m_PlayerActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @LoseGame.started += instance.OnLoseGame;
                @LoseGame.performed += instance.OnLoseGame;
                @LoseGame.canceled += instance.OnLoseGame;
                @WinGame.started += instance.OnWinGame;
                @WinGame.performed += instance.OnWinGame;
                @WinGame.canceled += instance.OnWinGame;
            }
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);

    // PlayerHUD
    private readonly InputActionMap m_PlayerHUD;
    private IPlayerHUDActions m_PlayerHUDActionsCallbackInterface;
    private readonly InputAction m_PlayerHUD_SkillTree;
    public struct PlayerHUDActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerHUDActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkillTree => m_Wrapper.m_PlayerHUD_SkillTree;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHUD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHUDActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerHUDActions instance)
        {
            if (m_Wrapper.m_PlayerHUDActionsCallbackInterface != null)
            {
                @SkillTree.started -= m_Wrapper.m_PlayerHUDActionsCallbackInterface.OnSkillTree;
                @SkillTree.performed -= m_Wrapper.m_PlayerHUDActionsCallbackInterface.OnSkillTree;
                @SkillTree.canceled -= m_Wrapper.m_PlayerHUDActionsCallbackInterface.OnSkillTree;
            }
            m_Wrapper.m_PlayerHUDActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SkillTree.started += instance.OnSkillTree;
                @SkillTree.performed += instance.OnSkillTree;
                @SkillTree.canceled += instance.OnSkillTree;
            }
        }
    }
    public PlayerHUDActions @PlayerHUD => new PlayerHUDActions(this);

    // SkillTree
    private readonly InputActionMap m_SkillTree;
    private ISkillTreeActions m_SkillTreeActionsCallbackInterface;
    private readonly InputAction m_SkillTree_Newaction;
    public struct SkillTreeActions
    {
        private @PlayerActions m_Wrapper;
        public SkillTreeActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_SkillTree_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_SkillTree; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillTreeActions set) { return set.Get(); }
        public void SetCallbacks(ISkillTreeActions instance)
        {
            if (m_Wrapper.m_SkillTreeActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_SkillTreeActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_SkillTreeActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_SkillTreeActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_SkillTreeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public SkillTreeActions @SkillTree => new SkillTreeActions(this);
    public interface IPlayerActionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnLoseGame(InputAction.CallbackContext context);
        void OnWinGame(InputAction.CallbackContext context);
    }
    public interface IPlayerHUDActions
    {
        void OnSkillTree(InputAction.CallbackContext context);
    }
    public interface ISkillTreeActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
