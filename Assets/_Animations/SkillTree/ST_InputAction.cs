//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Animations/SkillTree/SkillTree.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class ST_InputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public ST_InputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SkillTree"",
    ""maps"": [
        {
            ""name"": ""SkillTree"",
            ""id"": ""034e08a7-d467-4671-90c6-1368152cabc9"",
            ""actions"": [
                {
                    ""name"": ""MenuAnimations"",
                    ""type"": ""Button"",
                    ""id"": ""84327ea1-616f-40fb-aa23-a95f7cb94778"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c8899d0-b45b-496f-bdcf-3769f393eb4c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuAnimations"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SkillTree
        m_SkillTree = asset.FindActionMap("SkillTree", throwIfNotFound: true);
        m_SkillTree_MenuAnimations = m_SkillTree.FindAction("MenuAnimations", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SkillTree
    private readonly InputActionMap m_SkillTree;
    private ISkillTreeActions m_SkillTreeActionsCallbackInterface;
    private readonly InputAction m_SkillTree_MenuAnimations;
    public struct SkillTreeActions
    {
        private ST_InputAction m_Wrapper;
        public SkillTreeActions(ST_InputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MenuAnimations => m_Wrapper.m_SkillTree_MenuAnimations;
        public InputActionMap Get() { return m_Wrapper.m_SkillTree; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillTreeActions set) { return set.Get(); }
        public void SetCallbacks(ISkillTreeActions instance)
        {
            if (m_Wrapper.m_SkillTreeActionsCallbackInterface != null)
            {
                @MenuAnimations.started -= m_Wrapper.m_SkillTreeActionsCallbackInterface.OnMenuAnimations;
                @MenuAnimations.performed -= m_Wrapper.m_SkillTreeActionsCallbackInterface.OnMenuAnimations;
                @MenuAnimations.canceled -= m_Wrapper.m_SkillTreeActionsCallbackInterface.OnMenuAnimations;
            }
            m_Wrapper.m_SkillTreeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MenuAnimations.started += instance.OnMenuAnimations;
                @MenuAnimations.performed += instance.OnMenuAnimations;
                @MenuAnimations.canceled += instance.OnMenuAnimations;
            }
        }
    }
    public SkillTreeActions @SkillTree => new SkillTreeActions(this);
    public interface ISkillTreeActions
    {
        void OnMenuAnimations(InputAction.CallbackContext context);
    }
}
